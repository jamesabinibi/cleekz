generator client { provider = "prisma-client-js" }
datasource db { provider = "postgresql"; url = env("DATABASE_URL") }

enum Role { SELLER VENDOR MUSICIAN }

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String?
  name         String?
  image        String?
  phone        String?
  username     String   @unique
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile      Profile?
  products     Product[]
  orders       Order[]
  events       Event[]
  tracks       MusicTrack[]
}

model Profile {
  id         String   @id @default(cuid())
  userId     String   @unique
  logoUrl    String?
  brandColor String?
  welcome    String?
  links      Json?
  layout     String?
  user       User     @relation(fields: [userId], references: [id])
}

model Product {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  price       Int
  imageUrl    String?
  stock       Int      @default(0)
  barcode     String?  @unique
  isDigital   Boolean  @default(false)
  digitalUrl  String?
  user        User     @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    String      @default("pending")
  total     Int         @default(0)
  discount  Int         @default(0)
  items     OrderItem[]
  paystackRef String?
  authUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  qty       Int      @default(1)
  price     Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Event {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  flyerUrl    String?
  startsAt    DateTime?
  venue       String?
  user        User     @relation(fields: [userId], references: [id])
  ticketTypes TicketType[]
  tickets     Ticket[]
}

model TicketType {
  id       String  @id @default(cuid())
  eventId  String
  name     String
  price    Int
  limit    Int
  sold     Int     @default(0)
  event    Event   @relation(fields: [eventId], references: [id])
}

model Ticket {
  id         String   @id @default(cuid())
  eventId    String
  typeId     String?
  buyerEmail String
  code       String   @unique
  used       Boolean  @default(false)
  qrPng      String?
  event      Event     @relation(fields: [eventId], references: [id])
  type       TicketType? @relation(fields: [typeId], references: [id])
}

model MusicTrack {
  id         String   @id @default(cuid())
  userId     String
  title      String
  coverUrl   String?
  previewUrl String
  fullLink   String?
  plays      Int      @default(0)
  user       User     @relation(fields: [userId], references: [id])
}
